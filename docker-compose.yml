version: '3.2'
services:
  tc-informix:
    image: "appiriodevops/tc-database-scripts:latest"
    hostname: ${DB_SERVER_NAME}
    container_name: iif_innovator_c
    environment:
      LICENSE: accept
    ports:
      - "2021:2021"
      - "2022:2022"
      - "27017:27017"
      - "27018:27018"
      - "27883:27883"
    tty: true

  kafka:
    build:
      context: ./docker/kafka
    image: kafka-ssl:1.0
    container_name: kafka
    ports:
      - "9093:9093"
      - "9092:9092"
    environment:
      - "ENABLE_SSL=true"
      - "TRUSTSTORE_PASSWORD=test1234"
      - "KEYSTORE_PASSWORD=test1234"
      - "KEY_PASSWORD=test1234"

  mock-api:
    image: lsp-app:latest
    container_name: mock-api
    volumes:
      - ".:/app"
    command: run mock-api

  lsp-app-install:
    build:
      context: ./docker/legacy-submission-processor
      args:
        servername: ${DB_SERVER_NAME}
    image: lsp-app:latest
    volumes:
      - ".:/app"
    command: --unsafe-perm install

  lsp-app:
    build:
      context: ./docker/legacy-submission-processor
      args:
        servername: ${DB_SERVER_NAME}
    image: lsp-app:latest
    container_name: lsp-app
    environment:
      - "NODE_ENV=${NODE_ENV:-development}"
      - "PORT=3300"
    volumes:
      - ".:/app"
    command: run start:docker
    ports:
      - "3000:3300"
    links:
      - "kafka:kafka-host"
      - "mock-api:mock-api-host"
      - "tc-informix:informix"
    depends_on:
      - "kafka"
      - "tc-informix"
      - "mock-api"

  lsp-app-test:
    image: lsp-app:latest
    environment:
      - "NODE_ENV=test"
      - "PORT=3300"
    volumes:
      - ".:/app"
    command: run test:docker
    links:
      - "kafka:kafka-host"
      - "tc-informix:informix"
    depends_on:
      - "kafka"
      - "tc-informix"

  lsp-app-staging:
    build:
      context: ./docker/legacy-submission-processor
      args:
        servername: ${DB_SERVER_NAME}
    image: lsp-app-staging:latest
    container_name: lsp-app-staging
    ports:
      - "3000:3300"
    environment:
      - "NODE_ENV=staging"
      - "PORT=3300"
      - KAFKA_GROUP_ID=${KAFKA_GROUP_ID}
      - KAFKA_URL=${KAFKA_URL}
      - KAFKA_CLIENT_CERT=${KAFKA_CLIENT_CERT}
      - KAFKA_CLIENT_CERT_KEY=${KAFKA_CLIENT_CERT_KEY}
      - KAFKA_NEW_SUBMISSION_TOPIC=${KAFKA_NEW_SUBMISSION_TOPIC}
      - KAFKA_NEW_SUBMISSION_ORIGINATOR=${KAFKA_NEW_SUBMISSION_ORIGINATOR}
      - SUBMISSION_API_URL=${SUBMISSION_API_URL}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - CHALLENGE_INFO_API=${CHALLENGE_INFO_API}
    volumes:
      - ".:/app"
    command: run start:docker

  lsp-app-prod:
    build:
      context: ./docker/legacy-submission-processor
      args:
        servername: ${DB_SERVER_NAME}
    image: lsp-app-prod:latest
    container_name: lsp-app-prod
    ports:
      - "3000:3300"
    environment:
      - "NODE_ENV=production"
      - "PORT=3300"
      - KAFKA_GROUP_ID=${KAFKA_GROUP_ID}
      - KAFKA_URL=${KAFKA_URL}
      - KAFKA_CLIENT_CERT=${KAFKA_CLIENT_CERT}
      - KAFKA_CLIENT_CERT_KEY=${KAFKA_CLIENT_CERT_KEY}
      - KAFKA_NEW_SUBMISSION_TOPIC=${KAFKA_NEW_SUBMISSION_TOPIC}
      - KAFKA_NEW_SUBMISSION_ORIGINATOR=${KAFKA_NEW_SUBMISSION_ORIGINATOR}
      - SUBMISSION_API_URL=${SUBMISSION_API_URL}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - CHALLENGE_INFO_API=${CHALLENGE_INFO_API}
    volumes:
      - ".:/app"
    command: run start:docker
